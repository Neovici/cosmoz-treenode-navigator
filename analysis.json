{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Navigator through object with treelike datastructure.",
      "summary": "",
      "path": "cosmoz-treenode-navigator.js",
      "properties": [
        {
          "name": "t",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 20,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "tree",
          "type": "Tree | null | undefined",
          "description": "The main node structure",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 130,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Tree"
            }
          }
        },
        {
          "name": "dataPlane",
          "type": "Array | null | undefined",
          "description": "The currently displayed node list",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 3
            },
            "end": {
              "line": 138,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "selectedNode",
          "type": "Object | null | undefined",
          "description": "The selected node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 3
            },
            "end": {
              "line": 146,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "nodePath",
          "type": "string | null | undefined",
          "description": "The path of the selected node\nThis is the node which was highlighted and after the user tapped the select button",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 3
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_nodePathChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "nodesOnNodePath",
          "type": "Array | null | undefined",
          "description": "The nodes on the path of the selected node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 3
            },
            "end": {
              "line": 164,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "highlightedNode",
          "type": "Object | null | undefined",
          "description": "The highlighted (focused) node\nThis is the node which is currently selected in the list",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 3
            },
            "end": {
              "line": 172,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_highlightedNodeChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "highlightedNodePath",
          "type": "string | null | undefined",
          "description": "The path string of highlighted (focused) node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 3
            },
            "end": {
              "line": 179,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "searchValue",
          "type": "string | null | undefined",
          "description": "The search string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 3
            },
            "end": {
              "line": 186,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "searchPlaceholder",
          "type": "string | null | undefined",
          "description": "Placeholder for search field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 3
            },
            "end": {
              "line": 193,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Search\""
        },
        {
          "name": "searchGlobalPlaceholder",
          "type": "string | null | undefined",
          "description": "Text displayed when local search has finished\nto suggest a search on the entire tree",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Click to search again but globally.\""
        },
        {
          "name": "searchMinLength",
          "type": "number | null | undefined",
          "description": "Minimum length of searchValue to trigger a search",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 3
            },
            "end": {
              "line": 208,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "_renderedLevel",
          "type": "Array | null | undefined",
          "description": "Nodes (children) to be displayed when opening a node",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_openNodePath",
          "type": "string | null | undefined",
          "description": "The path of the opened node",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 3
            },
            "end": {
              "line": 225,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_nodesOnOpenNodePath",
          "type": "Array | null | undefined",
          "description": "The nodes on the path of the opened node",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 3
            },
            "end": {
              "line": 232,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_search",
          "type": "boolean | null | undefined",
          "description": "Whether a search should be executed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 3
            },
            "end": {
              "line": 239,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_argumentsToObject",
          "description": "Convert arguments to an object, skipping some argument.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 35,
              "column": 1
            },
            "end": {
              "line": 38,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "array",
              "description": "Arguments."
            },
            {
              "name": "skipnum",
              "type": "number",
              "description": "Argument number to skip."
            }
          ],
          "return": {
            "type": "object",
            "desc": "Resulting object with arguments."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_arrayToObject",
          "description": "Convert an array to an object.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 45,
              "column": 1
            },
            "end": {
              "line": 59,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array",
              "type": "array",
              "description": "Array to convert."
            }
          ],
          "return": {
            "type": "object",
            "desc": "Resulting object."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_ensureInitialized",
          "description": "Ensure mixin is initialized.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 65,
              "column": 1
            },
            "end": {
              "line": 71,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_",
          "description": "Convenience method for gettext. Translates a text.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 78,
              "column": 1
            },
            "end": {
              "line": 80,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Translation key."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "connectedCallback",
          "description": "Runs when connected.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 85,
              "column": 1
            },
            "end": {
              "line": 88,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "disconnectedCallback",
          "description": "Runs when disconnected.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 99,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "gettext",
          "description": "Translates a text.\n\nExample of basic translation:\n`_(string, t)`\n <div>{{ _(‘My translation’, t) }}</div>\n\nExample of basic translation with interpolation:\n`_(string, [args], t)`\n <div>{{ _(‘Hello {0}’, user.name, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 115,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "gettextgeneric",
          "description": "Generic handler for text translation",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 125,
              "column": 1
            },
            "end": {
              "line": 131,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            },
            {
              "name": "callerArgs",
              "type": "array",
              "description": "Arguments from the calling function."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "ngettext",
          "description": "Plural version of gettext. Translates a text to the current locale\nusing the first numeric argument after the two first arguments to\ndetermine if output should be singular or plural.\n\nExample of translation in singular or plural:\n`ngettext(singular, plural, count, t)`\n<div>{{ ngettext(‘My translation’,\n ‘My translations’, count, t) }}</div>\n\nExample of translation in singular or plural with interpolation:\n`ngettext(singular, plural, [count and other args], t)`\n<div>{{ ngettext(‘My translation for “{1}”’,\n ‘My {0} translations for “{1}”’, count, ‘hello’, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 151,
              "column": 1
            },
            "end": {
              "line": 169,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "singular",
              "type": "string",
              "description": "Singular text variant."
            },
            {
              "name": "plural",
              "type": "string",
              "description": "Plural text variant."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "pgettext",
          "description": "Translates a text using a specific context.\n\nExample of translation with context:\n`pgettext(context, ‘text’, t)`\n <div>{{ pgettext(‘Cancel Invoice’, ‘Cancel’, t) }}</div>\n\nExample of translation including context with interpolation:\n`pgettext(context, ‘text’, [args], t)`\n<div>{{ pgettext(‘Cancel Invoice’, ‘Cancel {0}’,\n document.type, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 186,
              "column": 1
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "string",
              "description": "Context text."
            },
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "npgettext",
          "description": "Translates a text in singular or plural with a specific context.\n\nExample of translation in singular or plural with context:\n`npgettext(context, singular, plural, count, t)`\n<div>{{ npgettext('Cancel invoice', ‘My cancellation’,\n ‘My {0} cancellations’, count, t) }}</div>\n\nExample of translation in singular or plural with context and\ninterpolation:\n`npgettext(context, singular, plural, count, t)`\n<div>{{ npgettext('Cancel invoice', ‘My {1} cancellation’,\n ‘My {0} {1} cancellations’, count, document.type, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 214,
              "column": 1
            },
            "end": {
              "line": 236,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "string",
              "description": "Context text."
            },
            {
              "name": "singular",
              "type": "string",
              "description": "Singular text variant."
            },
            {
              "name": "plural",
              "type": "string",
              "description": "Plural text variant."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_onNodeDblClicked",
          "description": "Selects the doubled clicked node and dispatches an node-dblclicked event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 1
            },
            "end": {
              "line": 256,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "The triggering event"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "focus",
          "description": "Focusses the search input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 263,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_computeDataPlane",
          "description": "Returns the found nodes based on a search string and a given tree to be searched",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 1
            },
            "end": {
              "line": 278,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "searching",
              "type": "Boolean",
              "description": "If true, a search should be executed"
            },
            {
              "name": "searchString",
              "type": "String",
              "description": "The search string"
            },
            {
              "name": "renderedLevel",
              "type": "Array",
              "description": "The node list on which the search should be executed"
            },
            {
              "name": "tree",
              "type": "Tree",
              "description": "The main tree"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The found nodes"
          }
        },
        {
          "name": "_renderLevel",
          "description": "Returns a node array with the children of a node on the given path\nIf the node doesn't have children, the node gets returned",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 316,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "The separated address parts of a node"
            },
            {
              "name": "tree",
              "type": "Tree",
              "description": "The main tree"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Nodes"
          }
        },
        {
          "name": "_normalizeNodes",
          "description": "Normalizes and returns an Array of nodes\nwith the properties name, path, sectionName, children",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 1
            },
            "end": {
              "line": 339,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nodes",
              "type": "Array",
              "description": "The input nodes"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The normalized nodes"
          }
        },
        {
          "name": "_getNode",
          "description": "Returns a node based on a given path locator.\nIf pathLocator is empty or not defined, null gets returned.\nIf pathLocator is only partly valid, the last valid node gets returned.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 1
            },
            "end": {
              "line": 360,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "The separated address parts of a node"
            },
            {
              "name": "tree",
              "type": "Tree",
              "description": "The main tree"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The found node"
          }
        },
        {
          "name": "_getTreePathParts",
          "description": "Returns the nodes on a path specified by a given path locator",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 1
            },
            "end": {
              "line": 372,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathLocator",
              "type": "String",
              "description": "The separated address parts of a node"
            },
            {
              "name": "tree",
              "type": "Tree",
              "description": "The main tree"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "The found nodes or empty array"
          }
        },
        {
          "name": "_clearSearch",
          "description": "Clears the search input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "The trigger event"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_getNodeName",
          "description": "Returns the name of a given node",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The node"
            }
          ],
          "return": {
            "type": "String",
            "desc": "The name"
          }
        },
        {
          "name": "_highlightedNodeChanged",
          "description": "Sets the highlightedNodePath when highlightedNode changed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 1
            },
            "end": {
              "line": 402,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The highlighted node"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "hasChildren",
          "description": "Returns true if a given node has children",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Object",
              "description": "The node"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if node has children"
          }
        },
        {
          "name": "openNode",
          "description": "Opens a node (renderLevel) based on a given path",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 417,
              "column": 1
            },
            "end": {
              "line": 425,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "The triggering event"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_nodePathChanged",
          "description": "Gets called if the selected node (path) has changed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 1
            },
            "end": {
              "line": 437,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "String",
              "description": "The path of the newly selected node"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_showGlobalSearchBtn",
          "description": "Returns true, if the button should be visible",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 1
            },
            "end": {
              "line": 446,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "searching",
              "type": "Boolean",
              "description": "If a search is currently executed"
            },
            {
              "name": "openNodeLevelPath",
              "type": "String",
              "description": "The open node level"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "The visibility of the button"
          }
        },
        {
          "name": "tryGlobalSearch",
          "description": "Triggers a global search",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 1
            },
            "end": {
              "line": 453,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_computeSearching",
          "description": "Returns true, if a search string is eligable to trigger a search",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 1
            },
            "end": {
              "line": 462,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "The search string"
            },
            {
              "name": "searchMinLength",
              "type": "Number",
              "description": "The minimum length of value to be valid"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "If a search should be triggered"
          }
        },
        {
          "name": "_renderSection",
          "description": "Returns true, if the path of a node should be visible in the view",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 1
            },
            "end": {
              "line": 483,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "searching",
              "type": "Boolean",
              "description": "If a search is currently executed"
            },
            {
              "name": "index",
              "type": "Number",
              "description": "The node's current index in the list"
            },
            {
              "name": "dataPlane",
              "type": "Array",
              "description": "The node list"
            },
            {
              "name": "node",
              "type": "Object",
              "description": "The node"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "If the path should be visible"
          }
        },
        {
          "name": "_clickOnEnterOrSpace",
          "description": "Triggers a click event on the currentTarget\nif space or enter key was pressed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 490,
              "column": 1
            },
            "end": {
              "line": 499,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "The event"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_computeRowClass",
          "description": "Returns the classes of a row based its selection state",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 506,
              "column": 1
            },
            "end": {
              "line": 508,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "classes",
              "type": "String",
              "description": "The default classes"
            },
            {
              "name": "selected",
              "type": "Boolean",
              "description": "If the row is currently selected"
            }
          ],
          "return": {
            "type": "String",
            "desc": "The CSS classes"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/rtl.html",
          "description": "rtl issue"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 0
        },
        "end": {
          "line": 509,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CosmozTreenodeNavigator",
      "attributes": [
        {
          "name": "t",
          "description": "",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 20,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "translatable"
        },
        {
          "name": "tree",
          "description": "The main node structure",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 130,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Tree | null | undefined"
        },
        {
          "name": "data-plane",
          "description": "The currently displayed node list",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 3
            },
            "end": {
              "line": 138,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "selected-node",
          "description": "The selected node",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 3
            },
            "end": {
              "line": 146,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "node-path",
          "description": "The path of the selected node\nThis is the node which was highlighted and after the user tapped the select button",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 3
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "nodes-on-node-path",
          "description": "The nodes on the path of the selected node",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 3
            },
            "end": {
              "line": 164,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "highlighted-node",
          "description": "The highlighted (focused) node\nThis is the node which is currently selected in the list",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 3
            },
            "end": {
              "line": 172,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "highlighted-node-path",
          "description": "The path string of highlighted (focused) node",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 3
            },
            "end": {
              "line": 179,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "search-value",
          "description": "The search string",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 3
            },
            "end": {
              "line": 186,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "search-placeholder",
          "description": "Placeholder for search field.",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 3
            },
            "end": {
              "line": 193,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "search-global-placeholder",
          "description": "Text displayed when local search has finished\nto suggest a search on the entire tree",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "search-min-length",
          "description": "Minimum length of searchValue to trigger a search",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 3
            },
            "end": {
              "line": 208,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "data-plane-changed",
          "description": "Fired when the `dataPlane` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-node-changed",
          "description": "Fired when the `selectedNode` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "node-path-changed",
          "description": "Fired when the `nodePath` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "nodes-on-node-path-changed",
          "description": "Fired when the `nodesOnNodePath` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "highlighted-node-path-changed",
          "description": "Fired when the `highlightedNodePath` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-treenode-navigator",
      "mixins": [
        "translatable"
      ]
    },
    {
      "description": "`cosmoz-treenode-navigator`\n\tNavigator through object with treelike datastructure.",
      "summary": "",
      "path": "cosmoz-treenode-button-view.js",
      "properties": [
        {
          "name": "t",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 20,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "multiSelection",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "tree",
          "type": "Tree | null | undefined",
          "description": "The main node structure",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 3
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Tree"
            }
          }
        },
        {
          "name": "selectedNode",
          "type": "Object | null | undefined",
          "description": "Currently selected node object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selectedNodes",
          "type": "Array | null | undefined",
          "description": "Selected nodes",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 3
            },
            "end": {
              "line": 163,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "noReset",
          "type": "boolean | null | undefined",
          "description": "If true, reset button gets hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 170,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "searchPlaceholder",
          "type": "string | null | undefined",
          "description": "Placeholder for the search field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 3
            },
            "end": {
              "line": 176,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "buttonTextPlaceholder",
          "type": "string | null | undefined",
          "description": "Placeholder for button text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "nodePath",
          "type": "string | null | undefined",
          "description": "The path of the selected node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 3
            },
            "end": {
              "line": 190,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "nodesOnNodePath",
          "type": "Array | null | undefined",
          "description": "The nodes on the path of the selected node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 3
            },
            "end": {
              "line": 196,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "searchGlobalPlaceholder",
          "type": "string | null | undefined",
          "description": "Text displayed when local search has finished\nto suggest a search on the entire tree",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 3
            },
            "end": {
              "line": 203,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dialogText",
          "type": "string | null | undefined",
          "description": "Settable text for dialog title.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 3
            },
            "end": {
              "line": 210,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Search or navigate to chosen destination\""
        },
        {
          "name": "searchMinLength",
          "type": "number | null | undefined",
          "description": "Minimum length before an search\nstarts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 217,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "highlightedNodePath",
          "type": "string | null | undefined",
          "description": "Path string of highlighted (focused) node",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 3
            },
            "end": {
              "line": 223,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_argumentsToObject",
          "description": "Convert arguments to an object, skipping some argument.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 35,
              "column": 1
            },
            "end": {
              "line": 38,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "array",
              "description": "Arguments."
            },
            {
              "name": "skipnum",
              "type": "number",
              "description": "Argument number to skip."
            }
          ],
          "return": {
            "type": "object",
            "desc": "Resulting object with arguments."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_arrayToObject",
          "description": "Convert an array to an object.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 45,
              "column": 1
            },
            "end": {
              "line": 59,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array",
              "type": "array",
              "description": "Array to convert."
            }
          ],
          "return": {
            "type": "object",
            "desc": "Resulting object."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_ensureInitialized",
          "description": "Ensure mixin is initialized.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 65,
              "column": 1
            },
            "end": {
              "line": 71,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_",
          "description": "Convenience method for gettext. Translates a text.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 78,
              "column": 1
            },
            "end": {
              "line": 80,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Translation key."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "connectedCallback",
          "description": "Runs when connected.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 85,
              "column": 1
            },
            "end": {
              "line": 88,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "disconnectedCallback",
          "description": "Runs when disconnected.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 99,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "gettext",
          "description": "Translates a text.\n\nExample of basic translation:\n`_(string, t)`\n <div>{{ _(‘My translation’, t) }}</div>\n\nExample of basic translation with interpolation:\n`_(string, [args], t)`\n <div>{{ _(‘Hello {0}’, user.name, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 115,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "gettextgeneric",
          "description": "Generic handler for text translation",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 125,
              "column": 1
            },
            "end": {
              "line": 131,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            },
            {
              "name": "callerArgs",
              "type": "array",
              "description": "Arguments from the calling function."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "ngettext",
          "description": "Plural version of gettext. Translates a text to the current locale\nusing the first numeric argument after the two first arguments to\ndetermine if output should be singular or plural.\n\nExample of translation in singular or plural:\n`ngettext(singular, plural, count, t)`\n<div>{{ ngettext(‘My translation’,\n ‘My translations’, count, t) }}</div>\n\nExample of translation in singular or plural with interpolation:\n`ngettext(singular, plural, [count and other args], t)`\n<div>{{ ngettext(‘My translation for “{1}”’,\n ‘My {0} translations for “{1}”’, count, ‘hello’, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 151,
              "column": 1
            },
            "end": {
              "line": 169,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "singular",
              "type": "string",
              "description": "Singular text variant."
            },
            {
              "name": "plural",
              "type": "string",
              "description": "Plural text variant."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "pgettext",
          "description": "Translates a text using a specific context.\n\nExample of translation with context:\n`pgettext(context, ‘text’, t)`\n <div>{{ pgettext(‘Cancel Invoice’, ‘Cancel’, t) }}</div>\n\nExample of translation including context with interpolation:\n`pgettext(context, ‘text’, [args], t)`\n<div>{{ pgettext(‘Cancel Invoice’, ‘Cancel {0}’,\n document.type, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 186,
              "column": 1
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "string",
              "description": "Context text."
            },
            {
              "name": "key",
              "type": "string",
              "description": "Text to translate."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "npgettext",
          "description": "Translates a text in singular or plural with a specific context.\n\nExample of translation in singular or plural with context:\n`npgettext(context, singular, plural, count, t)`\n<div>{{ npgettext('Cancel invoice', ‘My cancellation’,\n ‘My {0} cancellations’, count, t) }}</div>\n\nExample of translation in singular or plural with context and\ninterpolation:\n`npgettext(context, singular, plural, count, t)`\n<div>{{ npgettext('Cancel invoice', ‘My {1} cancellation’,\n ‘My {0} {1} cancellations’, count, document.type, t) }}</div>",
          "privacy": "public",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 214,
              "column": 1
            },
            "end": {
              "line": 236,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "string",
              "description": "Context text."
            },
            {
              "name": "singular",
              "type": "string",
              "description": "Singular text variant."
            },
            {
              "name": "plural",
              "type": "string",
              "description": "Plural text variant."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Translated text."
          },
          "inheritedFrom": "translatable"
        },
        {
          "name": "_clearItemSelection",
          "description": "Event handler for node chip removal button, removes a node chip.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 1
            },
            "end": {
              "line": 241,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "object",
              "description": "Polymer event object."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getButtonTextPlaceholder",
          "description": "Get a text label for the node selection button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 1
            },
            "end": {
              "line": 249,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "multiSelection",
              "type": "boolean",
              "description": "Multi selection setting."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Text label."
          }
        },
        {
          "name": "_enableReset",
          "description": "Whether the reset button should be enabled or not.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 1
            },
            "end": {
              "line": 261,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nodePath",
              "type": "string",
              "description": "Node path to check."
            },
            {
              "name": "noReset",
              "type": "boolean",
              "description": "Bypass to force disabled."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the button should be enabled or not."
          }
        },
        {
          "name": "_getButtonLabel",
          "description": "Get a button label based on path parts or a placeholder.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 273,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathParts",
              "type": "array",
              "description": "Nodes on the node path."
            },
            {
              "name": "placeholder",
              "type": "string",
              "description": "Replacement placeholder if no nodes are available."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Button label."
          }
        },
        {
          "name": "_getChipText",
          "description": "Get text from a node to set on a node chip.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 1
            },
            "end": {
              "line": 281,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "object",
              "description": "Node to get text from."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Chip text."
          }
        },
        {
          "name": "openDialogTree",
          "description": "Open the treenode navigator dialog.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 288,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focusSearch",
          "description": "Focus on the treenode navigator in the treenode navigator dialog.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 1
            },
            "end": {
              "line": 295,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "reset",
          "description": "Reset the component to make it ready for reuse",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 1
            },
            "end": {
              "line": 303,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "selectNode",
          "description": "Select the node in the treenode navigator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 318,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectNodeAndCloseDialog",
          "description": "Selects node and closes the dialog",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 1
            },
            "end": {
              "line": 326,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showSelectedNodes",
          "description": "Determine if selected nodes container should be visible or not.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 333,
              "column": 1
            },
            "end": {
              "line": 335,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "multiSelection",
              "type": "boolean",
              "description": "Multi selection setting."
            },
            {
              "name": "selectedNodesLength",
              "type": "number",
              "description": "Selected nodes quantity."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the selected nodes container should be visible or not."
          }
        },
        {
          "name": "refit",
          "description": "Callback event handler to refit the treenode navigator dialog when\ndata plane has changed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 0
        },
        "end": {
          "line": 348,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CosmozTreenodeButtonView",
      "attributes": [
        {
          "name": "t",
          "description": "",
          "sourceRange": {
            "file": "../@neovici/cosmoz-i18next/cosmoz-i18next.js",
            "start": {
              "line": 20,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "translatable"
        },
        {
          "name": "multi-selection",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "tree",
          "description": "The main node structure",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 3
            },
            "end": {
              "line": 145,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Tree | null | undefined"
        },
        {
          "name": "selected-node",
          "description": "Currently selected node object",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected-nodes",
          "description": "Selected nodes",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 3
            },
            "end": {
              "line": 163,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "no-reset",
          "description": "If true, reset button gets hidden",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 170,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "search-placeholder",
          "description": "Placeholder for the search field",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 3
            },
            "end": {
              "line": 176,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "button-text-placeholder",
          "description": "Placeholder for button text",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "node-path",
          "description": "The path of the selected node",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 3
            },
            "end": {
              "line": 190,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "nodes-on-node-path",
          "description": "The nodes on the path of the selected node",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 3
            },
            "end": {
              "line": 196,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "search-global-placeholder",
          "description": "Text displayed when local search has finished\nto suggest a search on the entire tree",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 3
            },
            "end": {
              "line": 203,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "dialog-text",
          "description": "Settable text for dialog title.",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 3
            },
            "end": {
              "line": 210,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "search-min-length",
          "description": "Minimum length before an search\nstarts.",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 217,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "highlighted-node-path",
          "description": "Path string of highlighted (focused) node",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 3
            },
            "end": {
              "line": 223,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-node-changed",
          "description": "Fired when the `selectedNode` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-nodes-changed",
          "description": "Fired when the `selectedNodes` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "node-path-changed",
          "description": "Fired when the `nodePath` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-treenode-button-view",
      "mixins": [
        "translatable"
      ]
    }
  ]
}
